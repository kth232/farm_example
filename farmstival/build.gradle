plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.joyfarm'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//유레카 서버 추가
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap' //버전 명시 안해도 호환되는 최적화 버전 알아서 찾아줌
	implementation 'org.springframework.cloud:spring-cloud-starter-config' //client config 추가해야 함

	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta' //querydsl
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'

	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'//javax->jakarta로 인식시킴
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	implementation 'org.modelmapper:modelmapper:3.2.1'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testRuntimeOnly 'com.h2database:h2' //testRuntimeOnly로 수정
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}